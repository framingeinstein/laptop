#!/usr/bin/env bash

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshenv"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "\033[0;31mFailed to complete setup. \033[0m" >&2; printf "Please send the output of $HOME/laptop.log to team chat for help.\n\n" exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [[ ! -e "$HOME/.zshrc" ]] && [[ ! -L "$HOME/.zshrc" ]]; then
  touch "$HOME/.zshrc"
fi

if [[ ! -e "$HOME/.zshenv" ]] && [[ ! -L "$HOME/.zshenv" ]]; then
  touch "$HOME/.zshenv"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

append_to_zshrc 'export HOMEBREW_CASK_OPTS="--appdir=/Applications"'

if [[ "$SHELL" != */zsh ]]; then
  fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshenv"
  fi

  source $zshrc
fi


brew_cask_install_or_upgrade(){
  if ! brew_cask_is_installed "$1"; then
    fancy_echo "Installing $1..."
    brew cask install "$@"
  fi
}

brew_cask_is_installed() {
  local name="$(brew_cask_expand_alias "$1")"

  brew cask list -1 | grep -Fqx "$name"
}

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}


brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  brew outdated --quiet "$name" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -q "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

fancy_echo "\033[0;32mWelcome! Prepare to have your machine be setup for most awesome developmentness.\033[0m" 
fancy_echo "Please provide your administator password to continue."
sudo -v

fancy_echo "Generating SSH key..."
if [[ ! -f $HOME/.ssh/id_rsa ]]; then
  ssh-keygen -t rsa -N "" -f  $HOME/.ssh/id_rsa
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update


fancy_echo "Installing Postgres, a good open source relational database ..."
  brew_install_or_upgrade 'postgres'

fancy_echo "Installing Redis, a good key-value database ..."
  brew_install_or_upgrade 'redis'

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing wget to download remote files ..."
  brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew_install_or_upgrade 'vim'

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew_install_or_upgrade 'ctags'

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew_install_or_upgrade 'imagemagick'

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  brew_install_or_upgrade 'qt'

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew_install_or_upgrade 'watch'

fancy_echo "Installing cask, for installing desktop applications from homebrew ..."
  brew tap caskroom/cask
  brew_install_or_upgrade 'brew-cask'

fancy_echo "Installing Vagrant, for managing local virtual machines ..."
  brew_cask_install_or_upgrade 'vagrant'

fancy_echo "Installing Virtualbox, for storing local virtual machines ..."
  brew_cask_install_or_upgrade 'virtualbox'

fancy_echo "Installing Alfred, for quick-finding applications, files and others ..."
  brew_cask_install_or_upgrade 'alfred'

fancy_echo "Installing Hipchat, for chatty-chatting ..."
  brew_cask_install_or_upgrade 'hipchat'

fancy_echo "Installing Box Sync, for file syncing and management ..."
  brew_cask_install_or_upgrade 'box-sync'

node_version="0.10.33"

fancy_echo "Installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages ..."
  brew_install_or_upgrade 'nvm'

  append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
  append_to_zshrc 'export NVM_DIR=~/.nvm'
  append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

  source $(brew --prefix nvm)/nvm.sh
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs..."
  nvm alias default "$node_version"

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force

fancy_echo "Installing Python..."
  brew_install_or_upgrade 'python'

fancy_echo "Installing Fabric for managing projects and environments ..."
  pip install fabric

fancy_echo "Installing Virtualenv for handling python environments ..."
  pip install virtualenv virtualenvwrapper

fancy_echo "Installing z, a command-line tool for quickly changing to often-used directories..."
  brew_install_or_upgrade 'z'
  append_to_zshrc 'source $(brew --prefix)/etc/profile.d/z.sh'

fancy_echo "Adding Grunt for automated build tasks ..."
  npm install -g grunt-cli

fancy_echo "Installing Heroku CLI for managing Heroku apps and Foreman for managing app processes ..."
  brew_install_or_upgrade 'heroku-toolbelt'

if ! command -v rcup >/dev/null; then
  fancy_echo "Installing rcm, to manage your dotfiles ..."
    brew tap thoughtbot/formulae
    brew_install_or_upgrade 'rcm'
else
  fancy_echo "rcm already installed. Skipping ..."
fi

fancy_echo "Installing dotfiles..."

cd $HOME

if [[ ! -d "$HOME/.dotfiles/" ]]; then
  git clone git@github.com:rallygroup/dotfiles.git $HOME/.dotfiles
fi

if [[ ! -d "$HOME/.dotfiles/.git" ]]; then
  cd $HOME/.dotfiles; git remote add origin git@github.com:rallygroup/dotfiles.git
  git pull origin master
  cd $HOME
fi

if [[ ! -d "$HOME/.dotfiles/zsh" ]]; then
  fancy_echo "Installing oh-my-zsh, a great zsh library"
  curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | ZSH=~/.dotfiles/zsh sh
fi

env RCRC=$HOME/dotfiles/rcrc rcup

if [[ ! -f $HOME/.bin/wp ]]; then
  fancy_echo "Installing wp-cli, a WordPress command line interface..."

  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar

  chmod +x wp-cli.phar
  sudo mv wp-cli.phar $HOME/.bin/wp
fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi

fancy_echo "Copying SSH key to clipboard..."
cat $HOME/.ssh/id_rsa.pub | pbcopy

fancy_echo "\033[0;32mInstall complete ! \033[0m" 
fancy_echo "\033[0;32mYour public SSH key is now in your clipboard, please paste that into general chat to share with the team. \033[0m"